@using BlazorApp.Client.Services;
@using BlazorApp.Common.Exceptions
@using BlazorApp.Shared.Models.RequestModels.User
@using BlazorApp.Shared.Models.ResponseModel.Pagination;
@using BlazorApp.Shared.Models.ResponseModel.Session
@using BlazorApp.Shared.Models.ResponseModel.User
@using System.Text.Json
@using Newtonsoft.Json;
@inherits LayoutComponentBase
@inject IJSRuntime JS
@inject IAccountService Service
@inject HttpClient Http
@inject NavigationManager Nv
@inject IToastService ToastService
<CascadingValue Value="this">
    <div class="page">
        <div class="sidebar px-4" style="background: #FBF9FD">
            <NavMenu />
        </div>

        <div class="main">
            @*Application level state provider*@
            <BlazorApp.Client.Shared.Pagination.PageIndexStateProvider>
                <div class="content" style="padding-top:0;">
                    @Body
                </div>
            </BlazorApp.Client.Shared.Pagination.PageIndexStateProvider>

            <BlazoredToasts Position="Blazored.Toast.Configuration.ToastPosition.TopRight"
                            Timeout="10"
                            IconType="IconType.FontAwesome"
                            SuccessIcon="oi oi-thumb-up"
                            ErrorIcon="oi oi-bug" />
        </div>


    </div>
</CascadingValue>


<div class="modal-backdrop fade @(show ? "show" : "") @(display ? "d-block" : "d-none")"></div>

<div class="modal fade @(show ? "show" : "")  @(display ? "d-block" : "d-none")" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Логін</h5>
                <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close" @onclick="Close">
                </button>
            </div>
            <div class="modal-body">
                @if (_showErr)
                {
                    <div class="alert alert-dismissible alert-danger">
                        <button type="button" class="btn-close" @onclick='HideError'></button>
                        <strong>Помилка </strong><a href=""> @_errStr</a>
                    </div>
                }
                <div class="mb-3">
                    <label for="loginEmail" class="form-label">Пошта</label>
                    <input type="email" class="form-control" id="loginEmail" placeholder="name@example.com" autocomplete="off" required @bind-value="email" />
                </div>
                <div class="mb-3">
                    <label for="loginPassword" class="form-label">Пароль</label>
                    <input type="password" class="form-control" id="loginPassword" required @bind-value="password" />
                </div>
                <div class="form-check mb-3">
                    <input class="form-check-input" type="checkbox" @bind-value="isAdmin" id="flexCheckDefault">
                    <label class="form-check-label" for="flexCheckDefault">
                        логін як адмін
                    </label>
                </div>
            </div>
            <div class="modal-footer">
                @if (isAdmin)
                {
                    <button type="button" class="btn btn-outline-success" @onclick="LoginAdmin">Логін</button>
                }
                else
                {
                    <button type="button" class="btn btn-success" @onclick="Login">Логін</button>
                }
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Закрити</button>
            </div>
        </div>
    </div>
</div>
@code
{
    [CascadingParameter]
    public Error Error { get; set; }

    private string _errStr = String.Empty;
    private bool _showErr;
    private bool show, display;
    private string email, password;
    private bool isAdmin;
#nullable enable
    private UserRoleResponseModel? _user { get; set; }
    string? json;



    public async Task<UserRoleResponseModel?> GetUser()
    {
        json = await JS.InvokeAsync<string>("localStorage.getItem", "user");
        if (json != null)
        {
            _user = System.Text.Json.JsonSerializer.Deserialize<UserRoleResponseModel>(json);
            return _user;
        }
        return null;

    }

    public async Task<bool> IsNullUserOrEmpty()
    {
        _user = await GetUser();
        if (_user == null)
            return true;
        return false;
    }

    public async Task<bool> IsInRole(string role)
    {
        _user = await GetUser();
        if (_user == null || _user.Role != role)
            return false;
        return true;
    }

    public bool GetLoggedIn()
    {
        return !_user.IsBlocked;
    }

    protected override async Task OnParametersSetAsync()
    {
        json = await JS.InvokeAsync<string>("localStorage.getItem", "user");
        if (json != null)
            _user = System.Text.Json.JsonSerializer.Deserialize<UserRoleResponseModel>(json);
    }

    public async Task OpenLogin()
    {
        display = true;
        //await Task.Delay(100);
        show = true;
    }

    public async Task HideError()
    {
        _showErr = false;
    }

    public async Task Logout()
    {
        await Service.Logout();
        _user = null;
        await JS.InvokeVoidAsync("localStorage.removeItem", "user");
        Nv.NavigateTo("/");
        StateHasChanged();
    }

    private async Task Close()
    {
        show = false;
        //await Task.Delay(500);
        display = false;
    }

    private async Task Login()
    {
        var postBody = new LoginRequest() { Email = email, Password = password };
        using var response = await Http.PostAsJsonAsync("api/v1/sessions", postBody);
        if (!response.IsSuccessStatusCode)
        {
            var errorModel = JsonConvert.DeserializeObject<ErrorResponseModel>(await response.Content.ReadAsStringAsync());
            foreach (var item in errorModel.Errors)
            {
                _errStr = item.Message;
                _showErr = true;
            }
        }
        else
        {
            var model = JsonConvert.DeserializeObject<JsonResponse<LoginResponseModel>>(await response.Content.ReadAsStringAsync());
            _user = model.Data.User;
            var json = System.Text.Json.JsonSerializer.Serialize(_user);
            await JS.InvokeVoidAsync("localStorage.setItem", "user", json);
            await Close();
        }

        StateHasChanged();
    }
    private async Task LoginAdmin()
    {
        var postBody = new AdminLoginRequest() { Email = email, Password = password };
        using var response = await Http.PostAsJsonAsync("api/v1/admin-sessions", postBody);
        if (!response.IsSuccessStatusCode)
        {
            var errorModel = JsonConvert.DeserializeObject<ErrorResponseModel>(await response.Content.ReadAsStringAsync());
            foreach (var item in errorModel.Errors)
            {
                _errStr = item.Message;
                _showErr = true;
            }

        }
        else
        {
            var _model = JsonConvert.DeserializeObject<JsonResponse<LoginResponseModel>>(await response.Content.ReadAsStringAsync());
            _user = _model.Data.User;
            var json = System.Text.Json.JsonSerializer.Serialize(_user);
            await JS.InvokeVoidAsync("localStorage.setItem", "user", json);
            await Close();
        }

        StateHasChanged();
    }
}


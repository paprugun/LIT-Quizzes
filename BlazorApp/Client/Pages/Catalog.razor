@page "/quizcatalog" 

@inject HttpClient Http
@inject IQuizService _service
@inject NavigationManager Nv
@using BlazorApp.Client.Services;
@using BlazorApp.Client.Shared.Pagination
@using BlazorApp.Shared.Models.Enums;
@using BlazorApp.Shared.Models.RequestModels.Pagination;
@using BlazorApp.Shared.Models.ResponseModel.Quiz;
@using BlazorApp.Shared.Models.ResponseModels.Quiz
<style>
    * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    list-style: none;
    font-family: 'Montserrat', sans-serif;
}

    .course-card {
        width: 265px;
        height: 250px;
        flex-shrink: 0;
        border-radius: 34px;
        background: #FBF9FD;
        border: 1px solid transparent;
        padding: 30px 19px 25px 19px;
        box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
    }

    .category .job {
        height: 350px;
        border: 1px solid transparent;
        padding: 30px 19px 25px 19px;
        border-radius: 30px;
        background: #FBF9FD;
        box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
        position: relative;
        overflow: hidden;
    }

    .more-info {
        position: absolute;
        bottom: 0;
        right: 0;
        background-color: #007bff;
        color: #fff;
        padding: 10px 20px;
        transform: translateX(100%);
        transition: transform 0.3s ease;
        pointer-events: none;
        border-top-left-radius: 15px; /* Скругленные углы вверхнего левого угла */
        border-bottom-right-radius: 5px; /* Скругленные углы нижнего правого угла */
    }

    .job:hover .more-info {
        transform: translateX(0);
    }

p {
    margin: 0;
}

.category .job {
    height: 280px;
    border: 1px solid transparent;
    padding: 30px 19px 25px 19px;
    border-radius: 5px;
    box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
}

.category .job:hover {
    border: 1px solid #0d6efd;
}

.category .job span {
    padding: 6px 20px;
    font-weight: 400;
    border-radius: 26px;
    display: inline-block;
}

.category .job .colors1 {
    font-weight: 800;
    color: #F27E42;
    background: #f27e4242;
}

.category .job .colors2 {
    font-weight: 800;
    color: #4294F2;
    background: rgba(66, 148, 255, 0.26);
}

.category .job .colors3 {
    font-weight: 800;
    color: #2EB98D;
    background: rgba(46, 185, 141, 0.03);
}

.category .job .colors4 {
    font-weight: 800;
    color: #6A42F2;
    background: rgba(106, 66, 242, 0.07);
}

.category .job .colors5 {
    font-weight: 800;
    color: #F162BC;
    background: rgba(241, 98, 188, 0.07);
}

.category .job .colors2 {
    font-weight: 800;
    color: #4294F2;
    background: rgba(66, 148, 255, 0.26);
}

a {
    text-decoration: none;
    font-size: 20px;
    font-weight: 600;
    color: #071112;
    text-transform: capitalize;
    margin-bottom: 17px;
    display: block;
}

.place {
    display: flex;
    align-items: center;
    font-size: 12px;
    padding-left: 0px;
    color: #76787A;
}

.left {
    font-weight: 800;
    position: relative;
}

.category .job span.time {
    font-weight: 900;
}

.btn.btn-primary {
    width: 150px;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: space-between;
}


.mt-30 {
    margin-top: 30px;
}

.mb-30 {
    margin-bottom: 30px;
}

.bottom {
    position: absolute;
    bottom: 0;
    left: 0;
}
</style>
<div style="background-color:  #FBF9FD">
    <div class="container h-100">
        <div class="d-flex align-items-center justify-content-center h-100">
            <div class="d-flex flex-column">
                <div class="input-group mb-3">
                    <input type="text" class="form-control" placeholder="Пошук..." @onkeydown="@Enter" @onchange="(ChangeEventArgs e) => _filter = e.Value.ToString()">
                    <button class="btn btn-sm btn-outline-primary" type="button" @onclick="Search">Пошук</button>
                    @if (_filter != String.Empty)
                    {
                        <button class="btn-close" type="button" @onclick="CleanFilters" style="margin-right: 15px"></button>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="btn-group" role="group">
        <div class="btn-group">
            <button class="btn colors4 @(_filter == "C#" ? "active" : "")" @onclick='() => SetFilter("C#")'>C#</button>
            <button class="btn colors5 @(_filter == "JavaScript" ? "active" : "")" @onclick='() => SetFilter("JavaScript")'>JS</button>
            <button class="btn colors2 @(_filter == "C++" ? "active" : "")" @onclick='() => SetFilter("C++")'>C++</button>
        </div>
    </div>
    <hr />

    <div class="container">
        <div class="row">
            @foreach (var course in _courses)
            {
                var rnd = new Random().Next(1, 5).ToString();
                <div class="col-lg-4 col-md-6 col-sm-6">
                    <div class="category mb-30">
                        <div class="job" @onclick='() => Nv.NavigateTo($"/course/{course.Id}")'>
                            <span class="colors@(rnd) mb-4">@course.Topic</span>
                            <h5 class="fw-bold text-wrap">@course.Name</h5>
                            <div class="container">
                                <div class="left d-flex flex-column">
                                    <div class="d-flex flex-row">
                                        @course.LessonsCount уроків
                                    </div>
                                    <div class="d-flex flex-row">
                                         
                                        @switch(course.Difficult)
                                        {
                                            case 1:
                                                <i style="color: yellow" class="oi oi-star"></i>

                                                <p>Підготовчий</p>
                                                break;
                                            case 2:
                                                <i style="color: yellow" class="oi oi-star"></i>
                                                <i style="color: yellow" class="oi oi-star"></i>

                                                <p>Базовий</p>
                                                break;
                                            case 3:
                                                <i style="color: yellow" class="oi oi-star"></i>
                                                <i style="color: yellow" class="oi oi-star"></i>
                                                <i style="color: yellow" class="oi oi-star"></i>

                                                <p>Середній</p>
                                                break;
                                            case 4:
                                                <i style="color: yellow" class="oi oi-star"></i>
                                                <i style="color: yellow" class="oi oi-star"></i>
                                                <i style="color: yellow" class="oi oi-star"></i>
                                                <i style="color: yellow" class="oi oi-star"></i>

                                                <p>Високий</p>
                                                break;
                                        }
                                    </div>
                                    <div class="d-flex flex-row">
                                        <i class="oi oi-book"></i> Англійська
                                    </div>
                                </div>
                            </div>
                            <div class="more-info"><strong>Дізнатись більше</strong></div>
                        </div>
                    </div>
                </div>
            }
            <div class="col-12 d-flex align-items-center justify-content-center">
                <Pagination TotalPages="@(_totalPages != 0 ? _totalPages : 1)"
                            PageIndex="@State.PageIndex"
                            Radius="3"
                            OnSelectedPage="@SelectedPage">
                </Pagination>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public PageIndexStateProvider State { get; set; }

    private List<SmallCourseResponseModel> _courses = new List<SmallCourseResponseModel>();

    #region Additional propeties
    private int _offset = 0;
    private int _itemsPerPage = 9;
    private int _totalPages = 0;
    private string _filter = String.Empty;
    private string _errString = String.Empty;
    #endregion

    private async Task SelectedPage(int selectedPageIndex)
    {
        if (_courses != null)
        {
            State.PageIndex = selectedPageIndex;
            _offset = _offset * (State.PageIndex - 1);
            await RefreshTable(new PaginationRequestModel<CourseTableColumn>() { Offset = _offset, Limit = _itemsPerPage, Search = _filter });
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshTable(new PaginationRequestModel<CourseTableColumn>() { Offset = 0, Search = _filter, Limit = _itemsPerPage });
        State.PageIndex = 1;
    }

    private void GoToQuiz(int quizId)
    {
        Nv.NavigateTo($"/passQuiz/{quizId}");
    }

    private async Task SetFilter(string filter)
    {
        if (_filter != filter)
        {
            _filter = filter;

            State.PageIndex = 1;
            await RefreshTable(new PaginationRequestModel<CourseTableColumn>() { Offset = 0, Search = _filter, Limit = _itemsPerPage });

        }
        else
        {
            await CleanFilters();
        }

    }


    public async Task Search()
    {
        State.PageIndex = 1;
        await RefreshTable(new PaginationRequestModel<CourseTableColumn>() { Offset = 0, Search = _filter, Limit = _itemsPerPage });
    }

    public async Task CleanFilters()
    {
        _filter = String.Empty;
        State.PageIndex = 1;
        await RefreshTable(new PaginationRequestModel<CourseTableColumn>() {Limit = _itemsPerPage });
    }

    public async Task RefreshTable(PaginationRequestModel<CourseTableColumn> model)
    {
        var response = await _service.GetAllCourses(model);
        _courses = response.Data;
        _itemsPerPage = model.Limit;
        _offset = response.Pagination.NextOffset;
        _totalPages = (int)Math.Ceiling(double.Parse(response.Pagination.TotalCount.ToString()) / _itemsPerPage);
    }

    private async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Search();
        }

    }
}

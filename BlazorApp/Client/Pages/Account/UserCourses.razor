@page "/usercourses"
@using BlazorApp.Client.Services;
@using BlazorApp.Client.Shared.Pagination;
@using BlazorApp.Shared.Models.Enums;
@using BlazorApp.Shared.Models.RequestModels.Pagination;
@using BlazorApp.Shared.Models.RequestModels.Pagination.CursorPagination
@using BlazorApp.Shared.Models.ResponseModel.Course
@using BlazorApp.Shared.Models.ResponseModel.Quiz;
@inject IQuizService _service
@inject NavigationManager Nv
<style>
    body {
        background: #FBF9FD;
    }

    .courses-list{
        padding: 35px;
        border-radius: 40px;
        background: #FFFFFF;
    }

    .courses-list-item{
        margin-top:32px;
        padding: 24px 32px;
        border: 1px solid #e5e5ee;
        border-radius: 16px;
    }

    .course-title{
        margin-top: 20px;
        font-size: 24px;
        font-weight: 600;
        line-height: 32px;
    }

    .course-topic1 {
        font-weight: 800;
        color: #F27E42;
        background: linear-gradient(to right, #f27e42 0%, #f27e42 calc(100% - width(.course-topic1)), transparent calc(100% - width(.course-topic1)));
    }

    .course-topic2 {
        font-weight: 800;
        color: #4294F2;
        background: linear-gradient(to right, #4294f2 0%, #4294f2 calc(100% - width(.course-topic2)), transparent calc(100% - width(.course-topic2)));
    }

    .course-topic3 {
        font-weight: 800;
        color: #2EB98D;
        background: linear-gradient(to right, #2eb98d 0%, #2eb98d calc(100% - width(.course-topic3)), transparent calc(100% - width(.course-topic3)));
    }

    .course-topic4 {
        font-weight: 800;
        color: #6A42F2;
        background: linear-gradient(to right, #6a42f2 0%, #6a42f2 calc(100% - width(.course-topic4)), transparent calc(100% - width(.course-topic4)));
    }

    .course-topic5 {
        font-weight: 800;
        color: #F162BC;
        background: linear-gradient(to right, #f162bc 0%, #f162bc calc(100% - width(.course-topic5)), transparent calc(100% - width(.course-topic5)));
    }

    .course-topic6 {
        font-weight: 800;
        color: #4294F2;
        background: linear-gradient(to right, #4294f2 0%, #4294f2 calc(100% - width(.course-topic6)), transparent calc(100% - width(.course-topic6)));
    }
</style>
<div class="px-4">
    <h1 style="font-size: 45px; font-weight: 600; margin-top:30px; margin-bottom:40px; color: #191F3D"><b>Ваші курси</b></h1>
    <div class="courses-list">
        @foreach (var course in _courses)
        {
            var rnd = new Random().Next(1, 6).ToString();
            <div class="courses-list-item">
                <div class="course-topic@(rnd)">@course.CourseName</div>
                <div class="course-title">@course.CourseName</div>
                
                <BlazorBootstrap.Progress Class="mb-3">
                    @for (int i = 0; i < course.CountOfDoneSteps; i++)
                    {
                        var percent = 100 / (course.CountOfDoneSteps+course.CountOfLeftSteps);
                        <BlazorBootstrap.ProgressBar Color="ProgressColor.Success" Width="percent" Style="border: 1px solid lightgrey"/>
                    }
                </BlazorBootstrap.Progress>
                <button class="btn btn-warning text-center" style="width: 200px; font-size: 15px; margin-top: 40px" @onclick='() => Nv.NavigateTo($"/assignment/{course.Id}")'><b>Переглянути деталі</b></button>
            </div>
        }
    </div>
</div>


<div class="col-12 d-flex align-items-center justify-content-center">
    <button class="btn btn-warning" @onclick="LoadMore">Завантажити ще</button>
</div>
@code {
    [CascadingParameter]
    public PageIndexStateProvider State { get; set; }

    private List<UserCourseResultResponseModel> _courses = new List<UserCourseResultResponseModel>();

    #region Additional propeties
    private int? _lastId = 0;
    private int _itemsPerPage = 9;
    private string _filter = String.Empty;
    private string _errString = String.Empty;
    #endregion

    private async Task LoadMore()
    {
        if (_courses != null)
        {
            await UpdateTable(new CursorPaginationRequestModel<CourseTableColumn>() {Limit = _itemsPerPage, Search = _filter, LastId = _lastId });
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshTable(new CursorPaginationRequestModel<CourseTableColumn>() {Search = _filter, Limit = _itemsPerPage, LastId = null });
    }

    private async Task SetFilter(string filter)
    {
        if (_filter != filter)
        {
            _filter = filter;

            await RefreshTable(new CursorPaginationRequestModel<CourseTableColumn>() {Search = _filter, Limit = _itemsPerPage, LastId = null });

        }
        else
        {
            await CleanFilters();
        }

    }


    public async Task Search()
    {
        await RefreshTable(new CursorPaginationRequestModel<CourseTableColumn>() { Search = _filter, Limit = _itemsPerPage, LastId = null });
    }

    public async Task CleanFilters()
    {
        _filter = String.Empty;
        await RefreshTable(new CursorPaginationRequestModel<CourseTableColumn>() { Limit = _itemsPerPage, LastId = null});
    }

    public async Task RefreshTable(CursorPaginationRequestModel<CourseTableColumn> model)
    {
        var response = await _service.GetAllAssignments(model);
        _courses = response.Data;
        _itemsPerPage = model.Limit;
        _lastId = response.Pagination.LastId;
        StateHasChanged();
    }

    public async Task UpdateTable(CursorPaginationRequestModel<CourseTableColumn> model)
    {
        var response = await _service.GetAllAssignments(model);
        _courses.AddRange(response.Data);
        _itemsPerPage = model.Limit;
        _lastId = response.Pagination.LastId;
        StateHasChanged();
    }

    private async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Search();
        }

    }
}

@page "/users"
@inject HttpClient Http
@inject NavigationManager Nv
@layout AdminLayout
@inject IJSRuntime JS
@using BlazorApp.Client.Shared.Pagination
@using BlazorApp.Shared.Models.Enums;
@using BlazorApp.Shared.Models.RequestModels.Pagination;
@using BlazorApp.Shared.Models.ResponseModel.Pagination;
@using BlazorApp.Shared.Models.ResponseModel.Session
@using System.Text.Json
@using BlazorApp.Shared.Models.ResponseModel.User;
@using Newtonsoft.Json;
  <table class="table table-hover">
      <thead>
        <div class="container h-100">
            <div class="d-flex align-items-center justify-content-center h-100">
                <div class="d-flex flex-column">
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" placeholder="Пошук..." @onkeydown="@Enter" @onchange="(ChangeEventArgs e) => _filter = e.Value.ToString()">
                        <button class="btn btn-sm btn-outline-primary" type="button" @onclick="Search">Пошук</button>
                        @if (_filter != String.Empty)
                        {
                            <button class="btn-close" type="button" @onclick="CleanFilters" style="margin-right: 15px"></button>
                        }
                    </div>
                </div>
            </div>
        </div>
        <br/>
        <input class="form-check-input" type="checkbox" @onchange="()=>RefreshTable(new PaginationRequestModel<UserTableColumn>(), !_getAdmins)">
        <label class="form-check-label">
            Відображати адмінів
        </label>
        <tr>
          <th scope="col">Id</th>
          <th scope="col">Ім`я</th>
          <th scope="col">Пошта</th>
          <th scope="col">Статус</th>
          <th scope="col">Налаштування</th>
        </tr>
      </thead>
      <tbody class="table-group-divider">
        @foreach (var item in _allUsers)
        {
            <tr>
                <th scope="col">@item.Id</th>
                <th scope="col"><a @onclick="() => UserInfo(item.Id)">@item.FirstName @item.LastName</a></th>
                <th scope="col">@item.Email</th>
                @if (@item.IsBlocked == true)
                {
                    <th scope="col">[Заблокованний]</th>
                }
                else
                {
                    <th scope="col">[Активний]</th>
                }       
                @if (!item.Email.Contains("admin"))
                {
                    <th scope="col"><button class="btn btn-primary oi oi-pencil" style="margin-left:25px" @onclick="() => UserInfo(item.Id)"></button></th>
                }
            </tr>
        }
    </tbody>
    <tfoot>
        <MyPagination TotalPages="@(_totalPages != 0 ? _totalPages : 1)"
                    PageIndex="@State.PageIndex"
                    Radius="3"
                    OnSelectedPage="@SelectedPage">
        </MyPagination>
    </tfoot>
</table>
@code {
    [CascadingParameter]
    public AdminLayout Layout { get; set; }

    [CascadingParameter]
    PageIndexStateProvider State { get; set; }

    private List<UserTableRowResponseModel> _allUsers = new List<UserTableRowResponseModel>();

    #region additional props

    bool _getAdmins;

    private bool _showTxtBox;
    private string json { get; set; }
    string errStr = String.Empty;

    bool _showQuizModal = false;
    private string _filter = String.Empty;

    private int _offset = 0;
    private int _itemsPerPage = 10;
    private int _totalPages = 0;
    #endregion
    private async Task SelectedPage(int selectedPageIndex)
    {
        if (_allUsers != null)
        {
            State.PageIndex = selectedPageIndex;
            _offset = _offset * (State.PageIndex - 1);
            await RefreshTable(new PaginationRequestModel<UserTableColumn>() { Offset = _offset, Limit = _itemsPerPage, Search = _filter }, _getAdmins);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!await Layout.IsUserAdmin())
        {
            Nv.NavigateTo("/accessdenied");
        }
        else
        {
            State.PageIndex = 1;
            await RefreshTable(new PaginationRequestModel<UserTableColumn>(), _getAdmins);
        }
    }


    public async Task Search()
    {
        State.PageIndex = 1;
        await RefreshTable(new PaginationRequestModel<UserTableColumn>() { Offset = 0, Search = _filter, Limit = _itemsPerPage }, _getAdmins);
    }

    public async Task CleanFilters()
    {
        _filter = String.Empty;
        State.PageIndex = 1;
        await RefreshTable(new PaginationRequestModel<UserTableColumn>(), _getAdmins);
    }

    public async Task RefreshTable(PaginationRequestModel<UserTableColumn> model, bool getAdmins)
    {
        var resposne = await Http.PostAsJsonAsync($"api/v1/admin-users/?getAdmins={getAdmins}", model);
        var _model = JsonConvert.DeserializeObject<JsonPaginationResponse<List<UserTableRowResponseModel>>>(await resposne.Content.ReadAsStringAsync());
        _allUsers = _model.Data;
        _itemsPerPage = model.Limit;
        _offset = _model.Pagination.NextOffset;
        _totalPages = (int)Math.Ceiling(double.Parse(_model.Pagination.TotalCount.ToString()) / _itemsPerPage);
        _getAdmins = getAdmins;
    }

    public async Task DeleteUser(int userId)
    {
        await Http.DeleteAsync($"api/v1/admin-users/{userId}");
        await RefreshTable(new PaginationRequestModel<UserTableColumn>(), _getAdmins);
    }

    public void UserInfo(int userId)
    {
        Nv.NavigateTo($"userinfo/{userId}");
    }

    private async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Search();
        }

    }
}

@using BlazorApp.Client.Services;
@using BlazorApp.Client.Shared.Pagination;
@using BlazorApp.Shared.Models.Enums;
@using BlazorApp.Shared.Models.RequestModels.Course
@using BlazorApp.Shared.Models.RequestModels.Pagination;
@using BlazorApp.Shared.Models.ResponseModel.Course
@using BlazorApp.Shared.Models.ResponseModel.Quiz;
@using BlazorApp.Shared.Models.ResponseModels.Quiz;
@using Newtonsoft.Json
@inject IQuizService _service
@inject IToastService ToastService
@inject NavigationManager Nv
@inject HttpClient Http
@layout AdminLayout
@page "/mycourses"
@if (_allCourses != null)
{
    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Створити тест</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрити"></button>
                </div>
                <div class="modal-body">
                    <h4 class="card-title">Введіть назву:</h4>
                    <div class="form-group">
                        <input type="text" class="form-control" @onchange="(ChangeEventArgs e) => name = e.Value.ToString()">
                    </div>
                    <h5 class="card-title">Введіть опис:</h5>
                    <div class="form-group">
                        <input type="text" class="form-control" @onchange="(ChangeEventArgs e) => description = e.Value.ToString()">
                    </div>
                    <h5 class="card-title">Введіть мову:</h5>
                    <div class="form-group">
                        <input type="text" class="form-control" @onchange="(ChangeEventArgs e) => langguage = e.Value.ToString()">
                    </div>
                    <h5 class="card-title">Введіть складність:</h5>
                    <div class="form-group">
                        <input type="number" class="form-control" @onchange="(ChangeEventArgs e) => diff = int.Parse(e.Value.ToString())">
                    </div>
                    <div class="form-group">
                        <label for="exampleSelect1" class="form-label mt-4">Виберіть тему:</label>
                        <select class="form-select" id="exampleSelect1" @onchange="(ChangeEventArgs e) => _topic = e.Value.ToString()">
                            @foreach (var item in _topics)
                            {
                                <option>@item.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрити</button>
                    <button type="button" class="btn btn-primary" @onclick="CreateCourse" data-bs-dismiss="modal">Створити</button>
                </div>
            </div>
        </div>
    </div>

    <button class="btn btn-success oi oi-plus" data-bs-toggle="modal" data-bs-target="#exampleModal"> </button>
    <button @onclick="() => RefreshTable(new PaginationRequestModel<CourseTableColumn>())" class="btn btn-datatable oi oi-reload"> </button>
    <div class="container h-100">
        <div class="d-flex align-items-center justify-content-center h-100">
            <div class="d-flex flex-column">
                <div class="input-group mb-3">
                    <input type="text" class="form-control" placeholder="Пошук..." @onkeydown="@Enter" @onchange="(ChangeEventArgs e) => _filter = e.Value.ToString()">
                    <button class="btn btn-sm btn-outline-primary" type="button" @onclick="Search">Пошук</button>
                    @if (_filter != String.Empty)
                    {
                        <button class="btn-close" type="button" @onclick="CleanFilters" style="margin-right: 15px"></button>
                    }
                </div>
            </div>
        </div>
    </div>

    <table class="table table-hover">
        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Назва</th>
                <th scope="col">Кількість уроків</th>
                <th scope="col">Мова</th>
                <th scope="col">Налаштування</th>
            </tr>
        </thead>
        <tbody class="table-group-divider">
            @foreach (var item in _allCourses)
            {
                <tr>
                    <th scope="col">@item.Id</th>
                    <th scope="col"><a href="/editCourse/@item.Id">@item.Name</a></th>
                    <th scope="col">@item.LessonsCount</th>
                    <th scope="col">@item.Language</th>
                    <th scope="col"><button class="btn btn-danger oi oi-trash" style="margin-left:5px" @onclick="() => DeleteQuiz(item.Id)"></button></th>
                </tr>
            }
        </tbody>
        <tfoot>
            <MyPagination TotalPages="@(_totalPages != 0 ? _totalPages : 1)"
                          PageIndex="@State.PageIndex"
                          Radius="3"
                          OnSelectedPage="@SelectedPage">
            </MyPagination>
        </tfoot>
    </table>
}
else
{
    <p>Loading...</p>
}

@code {
    [CascadingParameter]
    public AdminLayout Layout { get; set; }

    [CascadingParameter]
    public PageIndexStateProvider State { get; set; }

    private List<TopicResponse> _topics = new List<TopicResponse>();
    private List<SmallCourseResponseModel> _allCourses = new List<SmallCourseResponseModel>();

    #region additional props

    string name;
    string description;
    int diff;
    int[] quizzesIds;
    string langguage;
    string contentURLS;
    private string? _topic;

    private bool _showTxtBox;
    private string json { get; set; }
    string errStr = String.Empty;

    bool _showQuizModal = false;
    private string _filter = String.Empty;

    private int _offset = 0;
    private int _itemsPerPage = 10;
    private int _totalPages = 1;
    #endregion

    private async Task SelectedPage(int selectedPageIndex)
    {
        if (_allCourses != null)
        {
            State.PageIndex = selectedPageIndex;
            _offset = _offset * (State.PageIndex - 1);
            await RefreshTable(new PaginationRequestModel<CourseTableColumn>() { Offset = _offset, Limit = _itemsPerPage, Search = _filter });
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!await Layout.IsUserAdmin())
        {
            Nv.NavigateTo("/accessdenied");
        }
        else
        {
            State.PageIndex = 1;
            await RefreshTable(new PaginationRequestModel<CourseTableColumn>());
            await RefreshTopics();
        }
    }


    public async Task Search()
    {
        State.PageIndex = 1;
        await RefreshTable(new PaginationRequestModel<CourseTableColumn>() { Offset = 0, Search = _filter, Limit = _itemsPerPage });
    }

    public async Task CleanFilters()
    {
        _filter = String.Empty;
        State.PageIndex = 1;
        await RefreshTable(new PaginationRequestModel<CourseTableColumn>());
    }

    public async Task CreateCourse()
    {
        var postBody = new CourseRequestModel() { Name = name, Description = description, Difficult = diff, Language = langguage, Topic = _topic};
        using var response = await Http.PostAsJsonAsync("api/v1/admincourses", postBody);
        if (!response.IsSuccessStatusCode)
        {
            var errorModel = JsonConvert.DeserializeObject<ErrorResponseModel>(await response.Content.ReadAsStringAsync());
            ToastService.ShowError(errorModel.Errors.FirstOrDefault().Message);
        }

        await RefreshTable(new PaginationRequestModel<CourseTableColumn>());
    }

    public async Task RefreshTopics()
    {
        using var resposne = await Http.GetAsync($"api/v1/topics");
        var topics = await resposne.Content.ReadFromJsonAsync<IEnumerable<TopicResponse>>();
        _topics = topics.ToList();
    }

    public async Task RefreshTable(PaginationRequestModel<CourseTableColumn> model)
    {
        var response = await _service.GetAllCourses(model);
        _allCourses = response.Data;
        _itemsPerPage = model.Limit;
        _offset = response.Pagination.NextOffset;
        _totalPages = (int)Math.Ceiling(double.Parse(response.Pagination.TotalCount.ToString()) / _itemsPerPage);
    }

    public async Task GetTopic(string topic)
    {
        if (topic == "Ввести свою тему...")
        {
            _showTxtBox = true;
        }
        else
        {
            _topic = topic;
            _showTxtBox = false;
        }
    }

    public async Task EditQuiz(int id)
    {
        Nv.NavigateTo($"/editQuiz/{id}");
    }

    public async Task DeleteQuiz(int id)
    {
        await Http.DeleteAsync($"api/v1/admincourses/{id}");
        await RefreshTable(new PaginationRequestModel<CourseTableColumn>());
    }

    public async Task DeleteTopic(int id)
    {
        await Http.DeleteAsync($"admintopics/{id}");
        await RefreshTopics();
    }

    private async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Search();
        }

    }
}

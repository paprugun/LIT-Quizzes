@page "/passQuiz/{Id:int}"
@using BlazorApp.Common.Exceptions
@using BlazorApp.Shared.Models.RequestModels.Quiz
@using BlazorApp.Shared.Models.RequestModels.User
@using BlazorApp.Shared.Models.ResponseModel.User
@using BlazorApp.Shared.Models.ResponseModels.User
@using Newtonsoft.Json
@inject HttpClient Http
@inject NavigationManager Nv
@inject IToastService ToastService
<style>
    body {
        background: #FBF9FD;
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    .container {
        background-color: white;
        color: #333;
        border-radius: 10px;
        padding: 20px;
        font-family: 'Montserrat', sans-serif;
        max-width: 700px;
    }

        .container > p {
            font-size: 32px;
        }

    .question {
        width: 75%;
    }

    .options {
        position: relative;
        padding-left: 40px;
    }

    #options label {
        display: block;
        margin-bottom: 15px;
        font-size: 14px;
        cursor: pointer;
    }

    .options input {
        opacity: 0;
    }

    .checkmark {
        position: absolute;
        top: -1px;
        left: 0;
        height: 25px;
        width: 25px;
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 50%;
    }

    .options input:checked ~ .checkmark:after {
        display: block;
    }

    .options .checkmark:after {
        content: "";
        width: 10px;
        height: 10px;
        display: block;
        background: white;
        position: absolute;
        top: 50%;
        left: 50%;
        border-radius: 50%;
        transform: translate(-50%,-50%) scale(0);
        transition: 300ms ease-in-out 0s;
    }

    .options input[type="radio"]:checked ~ .checkmark {
        background: #21bf73;
        transition: 300ms ease-in-out 0s;
    }

        .options input[type="radio"]:checked ~ .checkmark:after {
            transform: translate(-50%,-50%) scale(1);
        }

    .btn-primary {
        background-color: #555;
        color: #ddd;
        border: 1px solid #ddd;
    }

        .btn-primary:hover {
            background-color: #21bf73;
            border: 1px solid #21bf73;
        }

    .btn-success {
        padding: 5px 25px;
        background-color: #21bf73;
    }
</style>

@if (joinQuizResponse.CurrentQuiz == null || joinQuizResponse.CurrentQuiz.Questions == null)
{
    <p>Loading...</p>
}
else
{
    <div class="px-4">

        <h3><strong>@_questionIndex / @joinQuizResponse.CurrentQuiz.Questions.Count</strong></h3>
        <br />
        <div class="container mt-sm-5 my-1">
            <div class="question ml-sm-5 pl-sm-5 pt-2">
                <div class="py-2 h5"><b>@joinQuizResponse.CurrentQuiz.Questions[_questionIndex].Question</b></div>
                <div class="ml-md-3 ml-sm-3 pl-md-5 pt-sm-0 pt-3" id="options">
                    @if (joinQuizResponse.CurrentQuiz.Questions[_questionIndex].Answers.FindAll(x => x.IsCorrect == true).Count > 1)
                    {
                        @foreach (var answer in joinQuizResponse.CurrentQuiz.Questions[_questionIndex].Answers)
                        {
                            var userAnswer = new QuizAnswerRequest() { QuestionId = answer.QuestionId, IsCorrect = answer.IsCorrect, Text = answer.Text };
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @onchange="(ChangeEventArgs e) => ChoseCheckBoxAnswer(userAnswer, bool.Parse(e.Value.ToString()))" />
                                <label class="form-check-label" style="color: black;">
                                    @answer.Text
                                </label>
                            </div>
                        }
                    }
                    else
                    {
                        @foreach (var answer in joinQuizResponse.CurrentQuiz.Questions[_questionIndex].Answers)
                        {
                            var userAnswer = new QuizAnswerRequest() { QuestionId = answer.QuestionId, IsCorrect = answer.IsCorrect, Text = answer.Text };
                            <label class="options" style="color: black;">
                                @answer.Text
                                <input type="radio" name="radio" @onchange="(ChangeEventArgs e) => ChoseRadioAnswer(userAnswer)">
                                <span class="checkmark"></span>
                            </label>
                        }
                    }

                </div>
            </div>
            <div class="d-flex align-items-center pt-3">
                <div id="prev">
                    <button class="btn btn-primary" @onclick="BackToLastQuestion">Назад</button>
                </div>
                <div class="ml-5">
                    <button class="btn btn-success" @onclick="() => ChoseRangeAnswer(_answersRage)">Далі</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    public MainLayout MainLayout { get; set; }

    [Parameter]
    public int Id { get; set; } = 0;

    private List<QuizAnswerRequest> _answersRage { get; set; } = new List<QuizAnswerRequest>();
    PassQuizRequestModel passQuizRequest = new PassQuizRequestModel();
    JoinQuizResponseModel joinQuizResponse = new JoinQuizResponseModel();

    private int _questionIndex { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        if (await MainLayout.IsNullUserOrEmpty())
        {
            Nv.NavigateTo("/unauthorized");
        }
        else
        {
            passQuizRequest.QuizId = Id;
            var postbody = new JoinQuizRequestModel() { QuizId = Id };
            try
            {
                using var response = await Http.PostAsJsonAsync($"api/v1/quiz/enter", postbody);

                if (!response.IsSuccessStatusCode)
                {
                    var errorModel = JsonConvert.DeserializeObject<ErrorResponseModel>(await response.Content.ReadAsStringAsync());
                    if (errorModel.Code == "404")
                        Nv.NavigateTo($"/404/Не можемо знайти цей тест. Можливо він був деактивований, перевірте код ще раз!");
                    else
                        ToastService.ShowError(errorModel.Errors.FirstOrDefault().Message);

                }

                var _model = await response.Content.ReadFromJsonAsync<JoinQuizResponseModel>();
                joinQuizResponse = _model;

            }
            catch (Exception ex)
            {


            }
        }


    }

    public async Task ChoseRangeAnswer(List<QuizAnswerRequest> answers)
    {
        if (_questionIndex < joinQuizResponse.CurrentQuiz.Questions.Count - 1)
        {
            passQuizRequest.UserAnswers.AddRange(answers);
            _questionIndex++;
        }
        else
        {
            passQuizRequest.UserAnswers.AddRange(answers);
            using var resposne = await Http.PostAsJsonAsync($"api/v1/quiz/pass", passQuizRequest);
            var _model = await resposne.Content.ReadFromJsonAsync<PassQuizResponseModel>();
            Nv.NavigateTo($"/resultPage/{_model.ResultId}");
        }
        _answersRage.Clear();
    }

    public async Task ChoseCheckBoxAnswer(QuizAnswerRequest model, bool isChecked)
    {
        switch (isChecked)
        {
            case true:
                _answersRage.Add(model);
                break;
            case false:
                _answersRage.Remove(_answersRage.FirstOrDefault(x => x.Text == model.Text));
                break;
        }
    }
    public async Task ChoseRadioAnswer(QuizAnswerRequest model)
    {
        _answersRage.Clear();
        _answersRage.Add(model);
    }

    public async Task BackToLastQuestion()
    {
        if (_questionIndex != 0)
        {
            _answersRage.Clear();
            _questionIndex--;
        }

    }
}


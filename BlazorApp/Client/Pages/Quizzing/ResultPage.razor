@page "/resultPage/{Id:int}"
@using BlazorApp.Shared.Models.ResponseModel.User
@using BlazorApp.Shared.Models.ResponseModels.Quiz
@inject HttpClient Http
@inject NavigationManager Nv
@layout EmptyLayout

@if (_result == null)
{
    <h1>Loading...</h1>
}
else
{
    <div class="px-4" style="padding-top: 15px;">
        <button @onclick="Back" class="btn btn-outline-dark oi oi-arrow-left"></button>
        <div class="d-flex flex-column">
            <h2 class="text-center"> @_result.Quiz.Name</h2>
            <button class="btn btn-warning text-center" style="width: 60%; margin: 0 auto;" @onclick='() => Nv.NavigateTo($"passQuiz/{_result.Quiz.Id}")'>
                Переробити тест
            </button>
        </div>
        <div class="px-4" style="padding-bottom:10px; padding-top: 10px;">
            <h3> Результат: </h3>
            @if (_result.CountOfCorrectAnswers >= _result.CountOfIncorrectAnswers)
            {
                <h4><strong class="text-success">@_result.CountOfCorrectAnswers / @_questionsCount</strong></h4>
            }
            else
            {
                <h4><strong class="text-danger">@_result.CountOfCorrectAnswers / @_questionsCount</strong></h4>
            }
        </div>
        <h2><strong>Вірні відповіді, перевір себе:</strong></h2>
        <hr />
        <div class="container">
            @foreach (var question in _result.Quiz.Questions)
            {
                <h4>@question.Question</h4>
                @foreach (var answer in question.Answers)
                {
                    if (answer.IsCorrect)
                    {
                        <h5 class="text-success">@answer.Text</h5>
                    }
                    else
                    {
                        <h5 class="text-danger">@answer.Text</h5>
                    }
                }
                <hr />
            }
        </div>
    </div>
}



@code {
    [Parameter]
    public int Id { get; set; } = 0;
    private UserResultResponseModel _result { get; set; }
    private int _questionsCount;

    protected override async Task OnInitializedAsync()
    {
        using var resposne = await Http.GetAsync($"api/v1/profile/getResult/{Id}");
        var _model = await resposne.Content.ReadFromJsonAsync<UserResultResponseModel>();
        _result = _model;
        _questionsCount = _result.CountOfCorrectAnswers + _result.CountOfIncorrectAnswers;

    }

    public async Task Back()
    {
        Nv.NavigateTo("/");
    }
}
